require(seewave)
require(phonTools)
#Set the parameters (frequency in Hertz)
frequency1 = 500
frequency2 = 1000
amplitude = 10
#Set how many times you want to listen/see the periods
number_of_periods = 1000
#Defining sinewaves:
hz_1 = sinusoid(frequency1, amps = 10, dur = 2*number_of_periods, fs = 22050, sum = FALSE,
show = FALSE, colors = NULL)
hz_2 = sinusoid(frequency2, amps = 10, dur = 2*number_of_periods, fs = 22050, sum = FALSE,
show = FALSE, colors = NULL)
sr = 22050 #Sample rate
#Listening to sine waves
listen(hz_1$wave1, f = sr)
listen(hz_2$wave1, f = sr)
listen(hz_1$wave1, f = sr)
#How many periods you want to visualize (set in relation to the lowest frequency)
n_p = 1
plot(hz_1$wave1[1:45*n_p], type = 'ls', col = 'blue', ylab = 'Amplitude', xlab = 'Tempo (ms)', main = 'Ondas senoidais 500 Hz vs 1000 Hz', xlim = c(0, 45))
par(new = TRUE)
plot(hz_2$wave1[1:45*n_p], type = 'ls', col = 'red', ylab = '', xlab = '', main = '', xlim = c(0, 45))
#Defining multiple tones with 'defasagem'
um <- hz_1$wave1[1:(length(hz_1$wave1)-1000)] #Original tone
dois <- hz_2$wave1[1001:length(hz_2$wave1)] #Tone out of phase
#Combining them
combined = um+dois
listen(combined, f = 22050)
listen(um, f = 22050)
listen(combined, f = 22050)
listen(c(combined, hz_1+hz_2), f = 22050)
listen(c(combined, hz_1+hz_2), f = 22050)
listen(hz_1+hz_2, f = 22050)
listen(hz_1$wave1+hz_2$wave1, f = 22050)
listen(combined, f = 22050)
listen(hz_1$wave1+hz_2$wave1, f = 22050)
listen(combined, f = 22050)
#Set the parameters (frequency in Hertz)
frequency1 = 200
frequency2 = 600
amplitude = 10
#Set how many times you want to listen/see the periods
number_of_periods = 1000
#Defining sinewaves:
hz_1 = sinusoid(frequency1, amps = 10, dur = 2*number_of_periods, fs = 22050, sum = FALSE,
show = FALSE, colors = NULL)
hz_2 = sinusoid(frequency2, amps = 10, dur = 2*number_of_periods, fs = 22050, sum = FALSE,
show = FALSE, colors = NULL)
sr = 22050 #Sample rate
#Listening to sine waves
listen(hz_1$wave1, f = sr)
listen(hz_2$wave1, f = sr)
eters (frequency in Hertz)
frequency1 = 500
frequency2 = 900
amplitude = 10
#Set how many times you want to listen/see the periods
number_of_periods = 1000
#Defining sinewaves:
hz_1 = sinusoid(frequency1, amps = 10, dur = 2*number_of_periods, fs = 22050, sum = FALSE,
show = FALSE, colors = NULL)
hz_2 = sinusoid(frequency2, amps = 10, dur = 2*number_of_periods, fs = 22050, sum = FALSE,
show = FALSE, colors = NULL)
sr = 22050 #Sample rate
#Listening to sine waves
listen(hz_1$wave1, f = sr)
listen(hz_2$wave1, f = sr)
#Listening to sine waves
listen(hz_1$wave1, f = sr)
listen(hz_2$wave1, f = sr)
many periods you want to visualize (set in relation to the lowest frequency)
n_p = 1
plot(hz_1$wave1[1:45*n_p], type = 'ls', col = 'blue', ylab = 'Amplitude', xlab = 'Tempo (ms)', main = 'Ondas senoidais 500 Hz vs 1000 Hz', xlim = c(0, 45))
par(new = TRUE)
plot(hz_2$wave1[1:45*n_p], type = 'ls', col = 'red', ylab = '', xlab = '', main = '', xlim = c(0, 45))
########################
#Defining multiple tones with 'defasagem'
um <- hz_1$wave1[1:(length(hz_1$wave1)-1000)] #Original tone
dois <- hz_2$wave1[1001:length(hz_2$wave1)] #Tone out of phase
#Combining them
listen(combined, f = 22050)
listen(hz_1$wave1+hz_2$wave1, f = 22050)
#Combining them
combined = um+dois
listen(combined, f = 22050)
listen(hz_1$wave1+hz_2$wave1, f = 22050)
crossing_points <- function(sine1, sine2){
estados = c()
for (i in 1:length(sine1)){
if (sine1[i] > sine2[i]) {
estado = 0
} else {
estado = 1
}
estados[[i]] <- estado
}
crossings = c()
for (i in 2:length(estados)) {
if (estados[i] != estados[i-1]) {
crossings[[i]] = i
}
}
crossings = na.omit(crossings)
return(crossings)
}
#How many periods do you want to visualize? (choose 1, otherwise
#the green lines will not work)
n_p = 1
plot(um[1:45*n_p], type = 'ls', col = 'blue', ylab = 'Amplitude', xlab = 'Tempo (ms)', main = 'Som complexo fora de fase \n Linha verde Ã© ~crossing point')
par(new = TRUE)
plot(dois[1:45*n_p], type = 'ls', col = 'red', ylab = '', xlab = '', main = '')
abline(v=c(crossing_points(um, dois)[1:4]), col= "green")
require(seewave)
require(phonTools)
#Set the parameters (frequency in Hertz)
frequency1 = 500
frequency2 = 900
amplitude = 10
#Set how many times you want to listen/see the periods
number_of_periods = 1000
#Defining sinewaves:
hz_1 = sinusoid(frequency1, amps = 10, dur = 2*number_of_periods, fs = 22050, sum = FALSE,
show = FALSE, colors = NULL)
hz_2 = sinusoid(frequency2, amps = 10, dur = 2*number_of_periods, fs = 22050, sum = FALSE,
show = FALSE, colors = NULL)
sr = 22050 #Sample rate
#Listening to sine waves
listen(hz_1$wave1, f = sr)
listen(hz_2$wave1, f = sr)
#How many periods you want to visualize (set in relation to the lowest frequency)
n_p = 1
plot(hz_1$wave1[1:45*n_p], type = 'ls', col = 'blue', ylab = 'Amplitude', xlab = 'Tempo (ms)', main = 'Ondas senoidais 500 Hz vs 1000 Hz', xlim = c(0, 45))
par(new = TRUE)
plot(hz_2$wave1[1:45*n_p], type = 'ls', col = 'red', ylab = '', xlab = '', main = '', xlim = c(0, 45))
#Defining multiple tones with 'defasagem'
um <- hz_1$wave1[1:(length(hz_1$wave1)-1000)] #Original tone
dois <- hz_2$wave1[1001:length(hz_2$wave1)] #Tone out of phase
#Combining them
combined = um+dois
listen(combined, f = 22050)
listen(hz_1$wave1+hz_2$wave1, f = 22050)
listen(hz_1$wave1+hz_2$wave1, f = 22050)
#Set the parameters (frequency in Hertz)
frequency1 = 500
frequency2 = 100
amplitude = 10
#Set how many times you want to listen/see the periods
number_of_periods = 1000
#Defining sinewaves:
hz_1 = sinusoid(frequency1, amps = 10, dur = 2*number_of_periods, fs = 22050, sum = FALSE,
show = FALSE, colors = NULL)
hz_2 = sinusoid(frequency2, amps = 10, dur = 2*number_of_periods, fs = 22050, sum = FALSE,
show = FALSE, colors = NULL)
sr = 22050 #Sample rate
#Defining multiple tones with 'defasagem'
um <- hz_1$wave1[1:(length(hz_1$wave1)-1000)] #Original tone
dois <- hz_2$wave1[1001:length(hz_2$wave1)] #Tone out of phase
#Combining them
combined = um+dois
listen(combined, f = 22050)
listen(hz_1$wave1+hz_2$wave1, f = 22050)
listen(combined, f = 22050)
listen(hz_1$wave1+hz_2$wave1, f = 22050)
listen(combined, f = 22050)
listen(hz_1$wave1+hz_2$wave1, f = 22050)
#Set the parameters (frequency in Hertz)
frequency1 = 200
frequency2 = 400
amplitude = 5
#Set how many times you want to listen/see the periods
number_of_periods = 1000
#Defining sinewaves:
hz_1 = sinusoid(frequency1, amps = 10, dur = 2*number_of_periods, fs = 22050, sum = FALSE,
show = FALSE, colors = NULL)
hz_2 = sinusoid(frequency2, amps = 10, dur = 2*number_of_periods, fs = 22050, sum = FALSE,
show = FALSE, colors = NULL)
#How many periods you want to visualize (set in relation to the lowest frequency)
n_p = 1
plot(hz_1$wave1[1:45*n_p], type = 'ls', col = 'blue', ylab = 'Amplitude', xlab = 'Tempo (ms)', main = 'Ondas senoidais 500 Hz vs 1000 Hz', xlim = c(0, 45))
par(new = TRUE)
plot(hz_2$wave1[1:45*n_p], type = 'ls', col = 'red', ylab = '', xlab = '', main = '', xlim = c(0, 45))
#############
#Defining multiple tones with 'defasagem'
um <- hz_1$wave1[1:(length(hz_1$wave1)-1000)] #Original tone
dois <- hz_2$wave1[1001:length(hz_2$wave1)] #Tone out of phase
#Combining them
combined = um+dois
listen(combined, f = 22050)
listen(hz_1$wave1+hz_2$wave1, f = 22050)
require(seewave)
require(phonTools)
#Set the parameters (frequency in Hertz)
frequency1 = 500
frequency2 = 100
amplitude = 10
#Set how many times you want to listen/see the periods
number_of_periods = 1000
#Defining sinewaves:
hz_1 = sinusoid(frequency1, amps = 10, dur = 2*number_of_periods, fs = 22050, sum = FALSE,
show = FALSE, colors = NULL)
hz_2 = sinusoid(frequency2, amps = 10, dur = 2*number_of_periods, fs = 22050, sum = FALSE,
show = FALSE, colors = NULL)
sr = 22050 #Sample rate
#How many periods you want to visualize (set in relation to the lowest frequency)
n_p = 1
plot(hz_1$wave1[1:45*n_p], type = 'ls', col = 'blue', ylab = 'Amplitude', xlab = 'Tempo (ms)', main = 'Ondas senoidais 500 Hz vs 1000 Hz', xlim = c(0, 45))
par(new = TRUE)
plot(hz_2$wave1[1:45*n_p], type = 'ls', col = 'red', ylab = '', xlab = '', main = '', xlim = c(0, 45))
rs (frequency in Hertz)
frequency1 = 500
frequency2 = 1000
es:
hz_1 = sinusoid(frequency1, amps = 10, dur = 2*number_of_periods, fs = 22050, sum = FALSE,
show = FALSE, colors = NULL)
hz_2 = sinusoid(frequency2, amps = 10, dur = 2*number_of_periods, fs = 22050, sum = FALSE,
show = FALSE, colors = NULL)
n_p = 1
plot(hz_1$wave1[1:45*n_p], type = 'ls', col = 'blue', ylab = 'Amplitude', xlab = 'Tempo (ms)', main = 'Ondas senoidais 500 Hz vs 1000 Hz', xlim = c(0, 45))
par(new = TRUE)
plot(hz_2$wave1[1:45*n_p], type = 'ls', col = 'red', ylab = '', xlab = '', main = '', xlim = c(0, 45))
require(astsa)
require(scales)
crosscor <- ccf(um, dois, plot = FALSE)
#Defining multiple tones with 'defasagem'
um <- hz_1$wave1[1:(length(hz_1$wave1)-1000)] #Original tone
dois <- hz_2$wave1[1001:length(hz_2$wave1)] #Tone out of phase
crosscor <- ccf(um, dois, plot = FALSE)
lista_correlacoes <- crosscor[["acf"]]
max_cor <- max(lista_correlacoes)
crosscor <- ccf(um, um, plot = FALSE)
lista_correlacoes <- crosscor[["acf"]]
max_cor <- max(lista_correlacoes)
max_cor <- which(max(lista_correlacoes))
max_cor <- which(lista_correlacoes == max(lista_correlacoes))
View(crosscor)
crosscor[["lag"]]
crosscor <- ccf(um, um, plot = FALSE)[["acf"]]
period <- which(lista_correlacoes == max(lista_correlacoes))
44/22050
0.001995465*1000
#How many periods you want to visualize (set in relation to the lowest frequency)
n_p = 1
plot(hz_1$wave1[1:44*n_p], type = 'ls', col = 'blue', ylab = 'Amplitude', xlab = 'Tempo (ms)', main = 'Ondas senoidais 500 Hz vs 1000 Hz', xlim = c(0, 45))
par(new = TRUE)
plot(hz_2$wave1[1:44*n_p], type = 'ls', col = 'red', ylab = '', xlab = '', main = '', xlim = c(0, 45))
####################
u want to visualize (set in relation to the lowest frequency)
n_p = 1
plot(hz_1$wave1[1:45*n_p], type = 'ls', col = 'blue', ylab = 'Amplitude', xlab = 'Tempo (ms)', main = 'Ondas senoidais 500 Hz vs 1000 Hz', xlim = c(0, 45))
par(new = TRUE)
plot(hz_2$wave1[1:45*n_p], type = 'ls', col = 'red', ylab = '', xlab = '', main = '', xlim = c(0, 45))
1/500
22050*0.002
source('~/GitHub/auditory_neuroscience_ufabc/complex_vs_sine.R', echo=TRUE)
periodo = 1/500
periodo = 1/500
periodo = 1/500
0.002/22050
22050*0.002
10/22050
10/0.0004535147 = x
10/0.0004535147
10/0.0004535147
10/22050
10/0.0004535147
p_alg<- function(periodo_em_pontos, sr){
periodo_em_segundos = periodo_em_pontos/sr
hz = 1/periodo_em_segundos
return(hz)
}
p_alg(45, 22050)
p_alg(44.1, 22050)
require(seewave)
require(phonTools)
require(astsa)
require(scales)
frequency = 500
number_of_periods = 100
t = sinusoid(frequency,
amps = 10,
dur = 2*number_of_periods,
fs = 22050,
sum = FALSE,
show = FALSE)
View(t)
crosscor <- ccf(t, t, plot = FALSE)[["acf"]]
crosscor <- ccf(t$wave1, t$wave1, plot = FALSE)[["acf"]]
period <- which(lista_correlacoes == max(lista_correlacoes))
crosscor <- ccf(t$wave1, t$wave1, plot = TRUE)
View(crosscor)
crosscor[["lag"]]
crosscor[["acf"]]
data.frame(delay = crosscor[["lag"]],
correlation = crosscor[["acf"]])
oi = data.frame(delay = crosscor[["lag"]],
correlation = crosscor[["acf"]])
View(oi)
View(oi)
p_alg(22, 22050) #Para um periodo de 44.1 pontos, eu tenho 500Hz
View(crosscor)
View(oi)
period <- which(lista_correlacoes == max(lista_correlacoes))
lista_correlacoes <- ccf(t$wave1, t$wave1, plot = FALSE)[["acf"]]
period <- which(lista_correlacoes == max(lista_correlacoes))
p_alg(34, 22050) #Para um periodo de 44.1 pontos, eu tenho 500Hz
View(oi)
#Defining sinewave:
frequency = 500
number_of_periods = 100
t = sinusoid(frequency,
amps = 10,
dur = 2*number_of_periods,
fs = 22050,
sum = FALSE,
show = FALSE)
lista_correlacoes <- ccf(t$wave1, t$wave1, plot = FALSE)[["acf"]]
period <- which(lista_correlacoes == max(lista_correlacoes))
max(lista_correlacoes)
lista_correlacoes <- lista_correlacoes[35:length(lista_correlacoes)]
period <- which(lista_correlacoes == max(lista_correlacoes))
max(lista_correlacoes)
lista_correlacoes == max(lista_correlacoes)
View(oi)
lista_correlacoes <- ccf(t$wave1, t$wave1, plot = FALSE)[["acf"]]
lista_correlacoes <- lista_correlacoes[12:length(lista_correlacoes)]
period <- which(lista_correlacoes == max(lista_correlacoes))
oi = data.frame(delay = crosscor[["lag"]],
correlation = crosscor[["acf"]])
p_alg(23, 22050) #Para um periodo de 44.1 pontos, eu tenho 500Hz
require(seewave)
require(phonTools)
#Set the parameters (frequency in Hertz)
frequency1 = 500
frequency2 = 900
amplitude = 10
#Set how many times you want to listen/see the periods
number_of_periods = 1000
#Defining sinewaves:
hz_1 = sinusoid(frequency1, amps = 10, dur = 2*number_of_periods, fs = 22050, sum = FALSE,
show = FALSE, colors = NULL)
hz_2 = sinusoid(frequency2, amps = 10, dur = 2*number_of_periods, fs = 22050, sum = FALSE,
show = FALSE, colors = NULL)
#Defining multiple tones with 'defasagem'
um <- hz_1$wave1[1:(length(hz_1$wave1)-1000)] #Original tone
dois <- hz_2$wave1[1001:length(hz_2$wave1)] #Tone out of phase
#Combining them
combined = um+dois
lista_correlacoes <- ccf(combined, combined, plot = FALSE)[["acf"]]
lista_correlacoes <- ccf(combined, combined, plot = TRUE)[["acf"]]
p_alg(30, 22050) #Para um periodo de 44.1 pontos, eu tenho 500Hz
p_alg<- function(periodo_em_pontos, sr){
periodo_em_segundos = periodo_em_pontos/sr
hz = 1/periodo_em_segundos
return(hz)
}
p_alg(30, 22050) #Para um periodo de 44.1 pontos, eu tenho 500Hz
p_alg(28, 22050) #Para um periodo de 44.1 pontos, eu tenho 500Hz
p_alg(35, 22050) #Para um periodo de 44.1 pontos, eu tenho 500Hz
lista_correlacoes <- ccf(um, um, plot = TRUE)[["acf"]]
lista_correlacoes <- ccf(dois, dois, plot = TRUE)[["acf"]]
p_alg(44, 22050) #Para um periodo de 44.1 pontos, eu tenho 500Hz
p_alg(24, 22050) #Para um periodo de 44.1 pontos, eu tenho 500Hz
caminho = 'C:/Users/Lenovo/Desktop/world/CiÃªncia/UFABC/MatÃ©rias/Auditory Neuroscience/audio/510'
setwd(caminho)
caminho = 'C:/Users/Lenovo/Desktop/world/CiÃªncia/UFABC/MatÃ©rias/Auditory Neuroscience/sound'
setwd(caminho)
caminho = 'C:/Users/Lenovo/Documents/GitHub/auditory_neuroscience_ufabc/sound'
setwd(caminho)
list.files(path = caminho)
